[
  {
    "name": "Test assertion contains",
    "description": "Tests that the output contains a specific substring.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "contains",
          "value": "Hello"
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "Hello, World!"
        }
      },
      {
        "vars": {
          "text": "Greetings, Earthling."
        }
      },
      {
        "vars": {
          "text": "Say Hello to my little friend."
        }
      }
    ]
  },
  {
    "name": "Test assertion contains-all",
    "description": "Tests that the output contains all specified substrings.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "contains-all",
          "value": ["Hello", "World"]
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "Hello, World!"
        }
      },
      {
        "vars": {
          "text": "Hello there, World of AI."
        }
      },
      {
        "vars": {
          "text": "Greetings, Earthling."
        }
      }
    ]
  },
  {
    "name": "Test assertion contains-any",
    "description": "Tests that the output contains at least one of the specified substrings.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "contains-any",
          "value": ["Hello", "Hi", "Greetings"]
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "Hello, World!"
        }
      },
      {
        "vars": {
          "text": "Hi there!"
        }
      },
      {
        "vars": {
          "text": "Goodbye, World."
        }
      }
    ]
  },
  {
    "name": "Test assertion contains-json",
    "description": "Tests that the output contains a JSON object with specified structure.",
    "input_variables": [{ "name": "json_text" }],
    "assertions": {
      "assert": [
        {
          "type": "contains-json",
          "value": {
            "required": ["name", "age"],
            "type": "object",
            "properties": {
              "name": { "type": "string" },
              "age": { "type": "number", "minimum": 0 }
            }
          }
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "json_text": "{\"name\": \"Alice\", \"age\": 30}"
        }
      },
      {
        "vars": {
          "json_text": "{\"name\": \"Bob\", \"age\": \"thirty\"}"
        }
      },
      {
        "vars": {
          "json_text": "{\"name\": \"Charlie\"}"
        }
      }
    ]
  },
  {
    "name": "Test assertion contains-sql",
    "description": "Tests that the output contains valid SQL code.",
    "input_variables": [{ "name": "sql_query" }],
    "assertions": {
      "assert": [
        {
          "type": "contains-sql",
          "value": {
            "databaseType": "PostgreSQL",
            "allowedTables": "select::sales::customers",
            "allowedColumns": "select::sales::name,select::sales::email"
          }
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "sql_query": "SELECT name, email FROM sales.customers WHERE id = 1;"
        }
      },
      {
        "vars": {
          "sql_query": "INSERT INTO sales.customers (name, email) VALUES ('Alice', 'alice@example.com');"
        }
      },
      {
        "vars": {
          "sql_query": "This is not a SQL query."
        }
      }
    ]
  },
  {
    "name": "Test assertion contains-xml",
    "description": "Tests that the output contains XML with specified elements.",
    "input_variables": [{ "name": "xml_text" }],
    "assertions": {
      "assert": [
        {
          "type": "contains-xml",
          "value": {
            "requiredElements": ["root.child", "root.sibling"]
          }
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "xml_text": "<root><child>Value</child><sibling>Value</sibling></root>"
        }
      },
      {
        "vars": {
          "xml_text": "<root><child>Value</child></root>"
        }
      },
      {
        "vars": {
          "xml_text": "This is not XML."
        }
      }
    ]
  },
  {
    "name": "Test assertion cost",
    "description": "Tests that the function cost does not exceed the specified threshold.",
    "input_variables": [{ "name": "operation" }],
    "assertions": {
      "assert": [
        {
          "type": "cost",
          "threshold": 50.0
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "operation": "operation1"
        }
      },
      {
        "vars": {
          "operation": "operation2"
        }
      },
      {
        "vars": {
          "operation": "operation3"
        }
      }
    ]
  },
  {
    "name": "Test assertion equals",
    "description": "Tests that the output exactly matches the specified string.",
    "input_variables": [{ "name": "response" }],
    "assertions": {
      "assert": [
        {
          "type": "equals",
          "value": "Exact Match"
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "response": "Exact Match"
        }
      },
      {
        "vars": {
          "response": "Exact match"
        }
      },
      {
        "vars": {
          "response": "Partial Match"
        }
      }
    ]
  },
  {
    "name": "Test assertion icontains",
    "description": "Tests that the output contains the specified string, case-insensitive.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "icontains",
          "value": "hello"
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "Hello, World!"
        }
      },
      {
        "vars": {
          "text": "hElLo there!"
        }
      },
      {
        "vars": {
          "text": "Hi there!"
        }
      }
    ]
  },
  {
    "name": "Test assertion icontains-all",
    "description": "Tests that the output contains all specified strings, case-insensitive.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "icontains-all",
          "value": ["hello", "world"]
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "Hello, World!"
        }
      },
      {
        "vars": {
          "text": "hElLo there, wOrLd!"
        }
      },
      {
        "vars": {
          "text": "Hello there!"
        }
      }
    ]
  },
  {
    "name": "Test assertion is-json",
    "description": "Tests that the output is a properly formatted JSON object with specified structure.",
    "input_variables": [{ "name": "json_text" }],
    "assertions": {
      "assert": [
        {
          "type": "is-json",
          "value": {
            "required": ["status", "data"],
            "type": "object",
            "properties": {
              "status": { "type": "string" },
              "data": { "type": "object" }
            }
          }
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "json_text": "{\"status\": \"success\", \"data\": {\"id\": 1, \"name\": \"Alice\"}}"
        }
      },
      {
        "vars": {
          "json_text": "{\"status\": \"error\", \"message\": \"Invalid request.\"}"
        }
      },
      {
        "vars": {
          "json_text": "Not a JSON string."
        }
      }
    ]
  },
  {
    "name": "Test assertion is-sql",
    "description": "Tests that the output is valid SQL, optionally restricting to specific database types, tables, and columns.",
    "input_variables": [{ "name": "sql_query" }],
    "assertions": {
      "assert": [
        {
          "type": "is-sql",
          "value": {
            "databaseType": "MySQL",
            "allowedTables": "select::employees::*",
            "allowedColumns": "select::employees::name,select::employees::age"
          }
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "sql_query": "SELECT name, age FROM employees WHERE id = 1;"
        }
      },
      {
        "vars": {
          "sql_query": "UPDATE employees SET age = 30 WHERE id = 2;"
        }
      },
      {
        "vars": {
          "sql_query": "DELETE FROM employees WHERE id = 3;"
        }
      }
    ]
  },
  {
    "name": "Test assertion is-xml",
    "description": "Tests that the output is properly formatted XML with specified elements.",
    "input_variables": [{ "name": "xml_text" }],
    "assertions": {
      "assert": [
        {
          "type": "is-xml",
          "value": {
            "requiredElements": ["note.to", "note.from"]
          }
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "xml_text": "<note><to>Tove</to><from>Jani</from></note>"
        }
      },
      {
        "vars": {
          "xml_text": "<note><to>Tove</to></note>"
        }
      },
      {
        "vars": {
          "xml_text": "This is not XML."
        }
      }
    ]
  },
  {
    "name": "Test assertion javascript",
    "description": "Tests that the output satisfies the provided JavaScript function.",
    "input_variables": [{ "name": "script_input" }],
    "assertions": {
      "assert": [
        {
          "type": "javascript",
          "value": "output.includes('Hello, World!')"
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "script_input": "Check if 'Hello, World!' is present."
        }
      },
      {
        "vars": {
          "script_input": "Check for 'Greetings, Earth!'"
        }
      },
      {
        "vars": {
          "script_input": "Check for 'Hi there!'"
        }
      }
    ]
  },
  {
    "name": "Test assertion latency",
    "description": "Tests that the function's execution latency does not exceed the specified threshold.",
    "input_variables": [{ "name": "operation" }],
    "assertions": {
      "assert": [
        {
          "type": "latency",
          "threshold": 200
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "operation": "quick_task"
        }
      },
      {
        "vars": {
          "operation": "moderate_task"
        }
      },
      {
        "vars": {
          "operation": "slow_task"
        }
      }
    ]
  },
  {
    "name": "Test assertion levenshtein",
    "description": "Tests that the Levenshtein distance between the output and the specified value does not exceed the threshold.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "levenshtein",
          "value": "Hello, World!",
          "threshold": 2
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "Hello, World!"
        }
      },
      {
        "vars": {
          "text": "Helo, World!"
        }
      },
      {
        "vars": {
          "text": "Hallo, Warld!"
        }
      }
    ]
  },
  {
    "name": "Test assertion perplexity",
    "description": "Tests that the output's perplexity score does not exceed the specified threshold.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "perplexity",
          "threshold": 50.0
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "This is a coherent sentence."
        }
      },
      {
        "vars": {
          "text": "Blah blah asdf qwer."
        }
      },
      {
        "vars": {
          "text": "The quick brown fox jumps over the lazy dog."
        }
      }
    ]
  },
  {
    "name": "Test assertion perplexity-score",
    "description": "Tests that the output's perplexity score is within the acceptable range.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "perplexity-score",
          "threshold": 30.0
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "Natural language processing is fascinating."
        }
      },
      {
        "vars": {
          "text": "Xxzxz xzx zxzxz."
        }
      },
      {
        "vars": {
          "text": "Artificial intelligence and machine learning."
        }
      }
    ]
  },
  {
    "name": "Test assertion python",
    "description": "Tests that the output satisfies the provided Python function.",
    "input_variables": [{ "name": "script_input" }],
    "assertions": {
      "assert": [
        {
          "type": "python",
          "value": "output.startswith('Hello')"
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "script_input": "Check if output starts with 'Hello'."
        }
      },
      {
        "vars": {
          "script_input": "Check if output starts with 'hello'."
        }
      },
      {
        "vars": {
          "script_input": "Check if output starts with 'Hi'."
        }
      }
    ]
  },
  {
    "name": "Test assertion regex",
    "description": "Tests that the output matches the specified regular expression.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "regex",
          "value": "^[A-Z][a-z]+, [A-Z][a-z]+!$"
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "Hello, World!"
        }
      },
      {
        "vars": {
          "text": "hello, world!"
        }
      },
      {
        "vars": {
          "text": "Hi, there!"
        }
      }
    ]
  },
  {
    "name": "Test assertion rouge-n",
    "description": "Tests that the output's ROUGE-N score meets the specified threshold.",
    "input_variables": [{ "name": "summary" }],
    "assertions": {
      "assert": [
        {
          "type": "rouge-n",
          "threshold": 0.5
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "summary": "The quick brown fox jumps over the lazy dog."
        }
      },
      {
        "vars": {
          "summary": "Hello, World!"
        }
      },
      {
        "vars": {
          "summary": "Goodbye, World!"
        }
      }
    ]
  },
  {
    "name": "Test assertion starts-with",
    "description": "Tests that the output starts with the specified string.",
    "input_variables": [{ "name": "text" }],
    "assertions": {
      "assert": [
        {
          "type": "starts-with",
          "value": "Start"
        }
      ]
    },
    "test_cases": [
      {
        "vars": {
          "text": "Start your engines."
        }
      },
      {
        "vars": {
          "text": "Begin the journey."
        }
      },
      {
        "vars": {
          "text": "Start and finish."
        }
      }
    ]
  }
]
