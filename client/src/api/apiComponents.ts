/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type LoginAuthLoginPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type LoginAuthLoginPostVariables = ApiContext["fetcherOptions"];

/**
 * Endpoint for the login procedure. Takes username and password as form-data input.
 * If credentials match a user in the database return user data and access token else return 401.
 */
export const fetchLoginAuthLoginPost = (
  variables: LoginAuthLoginPostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UserWithAccessToken,
    LoginAuthLoginPostError,
    undefined,
    {},
    {},
    {}
  >({ url: "/auth/login", method: "post", ...variables, signal });

/**
 * Endpoint for the login procedure. Takes username and password as form-data input.
 * If credentials match a user in the database return user data and access token else return 401.
 */
export const useLoginAuthLoginPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UserWithAccessToken,
      LoginAuthLoginPostError,
      LoginAuthLoginPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.UserWithAccessToken,
    LoginAuthLoginPostError,
    LoginAuthLoginPostVariables
  >({
    mutationFn: (variables: LoginAuthLoginPostVariables) =>
      fetchLoginAuthLoginPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RefreshTokenAuthRefreshTokenGetError =
  Fetcher.ErrorWrapper<undefined>;

export type RefreshTokenAuthRefreshTokenGetVariables =
  ApiContext["fetcherOptions"];

export const fetchRefreshTokenAuthRefreshTokenGet = (
  variables: RefreshTokenAuthRefreshTokenGetVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UserWithAccessToken,
    RefreshTokenAuthRefreshTokenGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/auth/refresh-token", method: "get", ...variables, signal });

export const useRefreshTokenAuthRefreshTokenGet = <
  TData = Schemas.UserWithAccessToken,
>(
  variables: RefreshTokenAuthRefreshTokenGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserWithAccessToken,
      RefreshTokenAuthRefreshTokenGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.UserWithAccessToken,
    RefreshTokenAuthRefreshTokenGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/auth/refresh-token",
      operationId: "refreshTokenAuthRefreshTokenGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchRefreshTokenAuthRefreshTokenGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type EvaluateEvaluatePromptIdGetPathParams = {
  promptId: string;
};

export type EvaluateEvaluatePromptIdGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type EvaluateEvaluatePromptIdGetVariables = {
  pathParams: EvaluateEvaluatePromptIdGetPathParams;
} & ApiContext["fetcherOptions"];

export const fetchEvaluateEvaluatePromptIdGet = (
  variables: EvaluateEvaluatePromptIdGetVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EvaluateSummary,
    EvaluateEvaluatePromptIdGetError,
    undefined,
    {},
    {},
    EvaluateEvaluatePromptIdGetPathParams
  >({ url: "/evaluate/{promptId}", method: "get", ...variables, signal });

export const useEvaluateEvaluatePromptIdGet = <
  TData = Schemas.EvaluateSummary,
>(
  variables: EvaluateEvaluatePromptIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.EvaluateSummary,
      EvaluateEvaluatePromptIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.EvaluateSummary,
    EvaluateEvaluatePromptIdGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/evaluate/{promptId}",
      operationId: "evaluateEvaluatePromptIdGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchEvaluateEvaluatePromptIdGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type PostUserDbUserPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type PostUserDbUserPostVariables = {
  body: Schemas.UserInput;
} & ApiContext["fetcherOptions"];

export const fetchPostUserDbUserPost = (
  variables: PostUserDbUserPostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SuccessResponse,
    PostUserDbUserPostError,
    Schemas.UserInput,
    {},
    {},
    {}
  >({ url: "/db/user", method: "post", ...variables, signal });

export const usePostUserDbUserPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SuccessResponse,
      PostUserDbUserPostError,
      PostUserDbUserPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SuccessResponse,
    PostUserDbUserPostError,
    PostUserDbUserPostVariables
  >({
    mutationFn: (variables: PostUserDbUserPostVariables) =>
      fetchPostUserDbUserPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetUserRouteDbUserUsernameGetPathParams = {
  /**
   * Email of the user to retrieve
   */
  username: string;
};

export type GetUserRouteDbUserUsernameGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetUserRouteDbUserUsernameGetVariables = {
  pathParams: GetUserRouteDbUserUsernameGetPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetUserRouteDbUserUsernameGet = (
  variables: GetUserRouteDbUserUsernameGetVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UserOutput,
    GetUserRouteDbUserUsernameGetError,
    undefined,
    {},
    {},
    GetUserRouteDbUserUsernameGetPathParams
  >({ url: "/db/user/{username}", method: "get", ...variables, signal });

export const useGetUserRouteDbUserUsernameGet = <TData = Schemas.UserOutput,>(
  variables: GetUserRouteDbUserUsernameGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserOutput,
      GetUserRouteDbUserUsernameGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.UserOutput,
    GetUserRouteDbUserUsernameGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/db/user/{username}",
      operationId: "getUserRouteDbUserUsernameGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetUserRouteDbUserUsernameGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type GetAiFunctionsDbAiFunctionGetError =
  Fetcher.ErrorWrapper<undefined>;

export type GetAiFunctionsDbAiFunctionGetResponse = Schemas.AIFunction[];

export type GetAiFunctionsDbAiFunctionGetVariables =
  ApiContext["fetcherOptions"];

export const fetchGetAiFunctionsDbAiFunctionGet = (
  variables: GetAiFunctionsDbAiFunctionGetVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    GetAiFunctionsDbAiFunctionGetResponse,
    GetAiFunctionsDbAiFunctionGetError,
    undefined,
    {},
    {},
    {}
  >({ url: "/db/ai-function", method: "get", ...variables, signal });

export const useGetAiFunctionsDbAiFunctionGet = <
  TData = GetAiFunctionsDbAiFunctionGetResponse,
>(
  variables: GetAiFunctionsDbAiFunctionGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAiFunctionsDbAiFunctionGetResponse,
      GetAiFunctionsDbAiFunctionGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetAiFunctionsDbAiFunctionGetResponse,
    GetAiFunctionsDbAiFunctionGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/db/ai-function",
      operationId: "getAiFunctionsDbAiFunctionGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetAiFunctionsDbAiFunctionGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type PostAiFunctionDbAiFunctionPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type PostAiFunctionDbAiFunctionPostVariables = {
  body: Schemas.AIFunctionRouteInput;
} & ApiContext["fetcherOptions"];

export const fetchPostAiFunctionDbAiFunctionPost = (
  variables: PostAiFunctionDbAiFunctionPostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SuccessResponse,
    PostAiFunctionDbAiFunctionPostError,
    Schemas.AIFunctionRouteInput,
    {},
    {},
    {}
  >({ url: "/db/ai-function", method: "post", ...variables, signal });

export const usePostAiFunctionDbAiFunctionPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SuccessResponse,
      PostAiFunctionDbAiFunctionPostError,
      PostAiFunctionDbAiFunctionPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SuccessResponse,
    PostAiFunctionDbAiFunctionPostError,
    PostAiFunctionDbAiFunctionPostVariables
  >({
    mutationFn: (variables: PostAiFunctionDbAiFunctionPostVariables) =>
      fetchPostAiFunctionDbAiFunctionPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetAiFunctionDbAiFunctionAiFunctionIdGetPathParams = {
  aiFunctionId: string;
};

export type GetAiFunctionDbAiFunctionAiFunctionIdGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetAiFunctionDbAiFunctionAiFunctionIdGetVariables = {
  pathParams: GetAiFunctionDbAiFunctionAiFunctionIdGetPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetAiFunctionDbAiFunctionAiFunctionIdGet = (
  variables: GetAiFunctionDbAiFunctionAiFunctionIdGetVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AIFunction,
    GetAiFunctionDbAiFunctionAiFunctionIdGetError,
    undefined,
    {},
    {},
    GetAiFunctionDbAiFunctionAiFunctionIdGetPathParams
  >({
    url: "/db/ai-function/{aiFunctionId}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetAiFunctionDbAiFunctionAiFunctionIdGet = <
  TData = Schemas.AIFunction,
>(
  variables: GetAiFunctionDbAiFunctionAiFunctionIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AIFunction,
      GetAiFunctionDbAiFunctionAiFunctionIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.AIFunction,
    GetAiFunctionDbAiFunctionAiFunctionIdGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/db/ai-function/{aiFunctionId}",
      operationId: "getAiFunctionDbAiFunctionAiFunctionIdGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetAiFunctionDbAiFunctionAiFunctionIdGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type PostPromptDbPromptPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type PostPromptDbPromptPostVariables = {
  body: Schemas.PromptRouteInput;
} & ApiContext["fetcherOptions"];

export const fetchPostPromptDbPromptPost = (
  variables: PostPromptDbPromptPostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SuccessResponse,
    PostPromptDbPromptPostError,
    Schemas.PromptRouteInput,
    {},
    {},
    {}
  >({ url: "/db/prompt", method: "post", ...variables, signal });

export const usePostPromptDbPromptPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SuccessResponse,
      PostPromptDbPromptPostError,
      PostPromptDbPromptPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SuccessResponse,
    PostPromptDbPromptPostError,
    PostPromptDbPromptPostVariables
  >({
    mutationFn: (variables: PostPromptDbPromptPostVariables) =>
      fetchPostPromptDbPromptPost({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetPromptRouteDbPromptPromptIdGetPathParams = {
  promptId: string;
};

export type GetPromptRouteDbPromptPromptIdGetError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GetPromptRouteDbPromptPromptIdGetVariables = {
  pathParams: GetPromptRouteDbPromptPromptIdGetPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetPromptRouteDbPromptPromptIdGet = (
  variables: GetPromptRouteDbPromptPromptIdGetVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Prompt,
    GetPromptRouteDbPromptPromptIdGetError,
    undefined,
    {},
    {},
    GetPromptRouteDbPromptPromptIdGetPathParams
  >({ url: "/db/prompt/{promptId}", method: "get", ...variables, signal });

export const useGetPromptRouteDbPromptPromptIdGet = <TData = Schemas.Prompt,>(
  variables: GetPromptRouteDbPromptPromptIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Prompt,
      GetPromptRouteDbPromptPromptIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.Prompt,
    GetPromptRouteDbPromptPromptIdGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/db/prompt/{promptId}",
      operationId: "getPromptRouteDbPromptPromptIdGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetPromptRouteDbPromptPromptIdGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetPathParams = {
  aiFunctionId: string;
};

export type GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetResponse =
  Schemas.Prompt[];

export type GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetVariables = {
  pathParams: GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetAllPromptsAiFunctionDbPromptsAiFunctionIdGet = (
  variables: GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetResponse,
    GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetError,
    undefined,
    {},
    {},
    GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetPathParams
  >({ url: "/db/prompts/{aiFunctionId}", method: "get", ...variables, signal });

export const useGetAllPromptsAiFunctionDbPromptsAiFunctionIdGet = <
  TData = GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetResponse,
>(
  variables: GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetResponse,
      GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetResponse,
    GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/db/prompts/{aiFunctionId}",
      operationId: "getAllPromptsAiFunctionDbPromptsAiFunctionIdGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetAllPromptsAiFunctionDbPromptsAiFunctionIdGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/auth/refresh-token";
      operationId: "refreshTokenAuthRefreshTokenGet";
      variables: RefreshTokenAuthRefreshTokenGetVariables;
    }
  | {
      path: "/evaluate/{promptId}";
      operationId: "evaluateEvaluatePromptIdGet";
      variables: EvaluateEvaluatePromptIdGetVariables;
    }
  | {
      path: "/db/user/{username}";
      operationId: "getUserRouteDbUserUsernameGet";
      variables: GetUserRouteDbUserUsernameGetVariables;
    }
  | {
      path: "/db/ai-function";
      operationId: "getAiFunctionsDbAiFunctionGet";
      variables: GetAiFunctionsDbAiFunctionGetVariables;
    }
  | {
      path: "/db/ai-function/{aiFunctionId}";
      operationId: "getAiFunctionDbAiFunctionAiFunctionIdGet";
      variables: GetAiFunctionDbAiFunctionAiFunctionIdGetVariables;
    }
  | {
      path: "/db/prompt/{promptId}";
      operationId: "getPromptRouteDbPromptPromptIdGet";
      variables: GetPromptRouteDbPromptPromptIdGetVariables;
    }
  | {
      path: "/db/prompts/{aiFunctionId}";
      operationId: "getAllPromptsAiFunctionDbPromptsAiFunctionIdGet";
      variables: GetAllPromptsAiFunctionDbPromptsAiFunctionIdGetVariables;
    };
