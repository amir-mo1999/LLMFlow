/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
export type AIFunction = {
  /**
   * @maxLength 40
   * @minLength 1
   * @example Summarize Texts
   */
  name: string
  /**
   * @maxLength 1000
   * @minLength 1
   * @example Summarizes english texts to a given number_of_sentences.
   */
  description: string
  /**
   * @example ["openai:gpt-4o-mini","openai:gpt-4"]
   */
  providers: Provider[]
  /**
   * @example [{"name":"text"},{"name":"number_of_sentences"}]
   */
  input_variables: InputVariable[]
  /**
   * @example {"type":"string"}
   */
  output_schema: JsonSchemaOutput
  /**
   * @example [{"type":"icontains","value":"the","weight":1},{"type":"contains","value":"thgewgewgewgewge","weight":1}]
   */
  assert: Assertion[]
  /**
   * @example [{"assert":[{"type":"icontains","value":"serendipity","weight":5}],"vars":{"number_of_sentences":"2","text":"The power of serendipity is fascinating. Sometimes, the most unexpected encounters can lead to life-changing experiences. Imagine strolling through a park and stumbling upon a group of musicians, their melodies drawing you in. You pause for a moment, only to realize that this spontaneous moment of joy is exactly what you needed—a break from the routine, a reminder of life's simple pleasures. Serendipity teaches us that not everything needs to be planned. Sometimes, the best moments are the ones that catch us by surprise."}},{"assert":[{"type":"icontains","value":"minimalism","weight":5}],"vars":{"number_of_sentences":"2","text":"The art of minimalism is more than just decluttering your space—it's about simplifying life. In a world overflowing with choices and distractions, minimalism encourages you to focus on what truly matters. It's about owning fewer things but cherishing each one more deeply. By stripping away the excess, you create room for clarity, intention, and peace. Whether it’s reducing physical possessions or streamlining your daily habits, minimalism can bring a sense of freedom, allowing you to invest time and energy in experiences and relationships that bring genuine joy."}}]
   */
  test_cases: TestCaseOutput[]
  _id?: string
  /**
   * @minimum 0
   */
  number_of_prompts: number
  implemented: boolean
  /**
   * @format email
   */
  username: string
  /**
   * @format date-time
   */
  creation_time: string
}

export type AIFunctionOutput = {
  /**
   * @example {"content":"Hey, AI! What's the weather like today?","role":"user"}
   */
  prompt: PromptMessage[]
  /**
   * @example The weather is sunny today.
   */
  response: string | Record<string, any>
  /**
   * @example 0.9
   */
  score: number
  /**
   * @example 0.000001
   */
  cost: number
  /**
   * @example 1200
   */
  latency: number
  /**
   * @example false
   */
  is_json: boolean
}

export type AIFunctionPatchInput = {
  name?: string | null
  description?: string | null
  providers?: Provider[] | null
  input_variables?: InputVariable[] | null
  output_schema?: JsonSchemaInput | null
  assert?: Assertion[] | null
  test_cases?: TestCaseInput[] | null
}

export type AIFunctionRouteInput = {
  /**
   * @maxLength 40
   * @minLength 1
   * @example Summarize Texts
   */
  name: string
  /**
   * @maxLength 1000
   * @minLength 1
   * @example Summarizes english texts to a given number_of_sentences.
   */
  description: string
  /**
   * @example ["openai:gpt-4o-mini","openai:gpt-4"]
   */
  providers: Provider[]
  /**
   * @example [{"name":"text"},{"name":"number_of_sentences"}]
   */
  input_variables: InputVariable[]
  /**
   * @example {"type":"string"}
   */
  output_schema: JsonSchemaInput
  /**
   * @example [{"type":"icontains","value":"the","weight":1},{"type":"contains","value":"thgewgewgewgewge","weight":1}]
   */
  assert: Assertion[]
  /**
   * @example [{"assert":[{"type":"icontains","value":"serendipity","weight":5}],"vars":{"number_of_sentences":"2","text":"The power of serendipity is fascinating. Sometimes, the most unexpected encounters can lead to life-changing experiences. Imagine strolling through a park and stumbling upon a group of musicians, their melodies drawing you in. You pause for a moment, only to realize that this spontaneous moment of joy is exactly what you needed—a break from the routine, a reminder of life's simple pleasures. Serendipity teaches us that not everything needs to be planned. Sometimes, the best moments are the ones that catch us by surprise."}},{"assert":[{"type":"icontains","value":"minimalism","weight":5}],"vars":{"number_of_sentences":"2","text":"The art of minimalism is more than just decluttering your space—it's about simplifying life. In a world overflowing with choices and distractions, minimalism encourages you to focus on what truly matters. It's about owning fewer things but cherishing each one more deeply. By stripping away the excess, you create room for clarity, intention, and peace. Whether it’s reducing physical possessions or streamlining your daily habits, minimalism can bring a sense of freedom, allowing you to invest time and energy in experiences and relationships that bring genuine joy."}}]
   */
  test_cases: TestCaseInput[]
}

export type AppModelsPromptPrompt = {
  /**
   * @example [{"content":"Summarize the following text: {{text}} in {{number_of_sentences}} sentences.","role":"user"}]
   */
  messages: PromptMessage[]
  ai_function_id: string
  _id?: string
  /**
   * @format email
   */
  username: string
  /**
   * @format date-time
   */
  creation_time: string
  evals?: {
    [key: string]: EvaluateSummary
  } | null
  ai_function_name: string
  /**
   * @default false
   */
  revision_required?: boolean | null
  index: number
}

export type AppModelsPromptfooModelsPrompt = {
  raw?: string | null
}

export type Assertion = {
  type: BaseAssertionTypes
  value?: string | string[] | Record<string, any> | null
  threshold?: number | null
  weight?: number | null
  metric?: string | null
}

export type BaseAssertionTypes =
  | "contains"
  | "contains-all"
  | "contains-any"
  | "contains-json"
  | "contains-sql"
  | "contains-xml"
  | "cost"
  | "equals"
  | "icontains"
  | "icontains-all"
  | "icontains-any"
  | "is-json"
  | "is-sql"
  | "is-xml"
  | "javascript"
  | "latency"
  | "levenshtein"
  | "perplexity-score"
  | "perplexity"
  | "python"
  | "regex"
  | "rouge-n"
  | "starts-with"

export type Body = {
  [key: string]: string
}

export type BodyLoginAuthLoginPost = {
  grant_type?: string | null
  username: string
  password: string
  /**
   * @default
   */
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

/**
 * Holds a set of reusable objects for different aspects of the OAS.
 * All objects defined within the components object will have no effect on the API
 * unless they are explicitly referenced from properties outside the components object.
 *
 * @example {"parameters":{"limitParam":{"description":"max records to return","in":"query","name":"limit","required":true,"schema":{"format":"int32","type":"integer"}},"skipParam":{"description":"number of items to skip","in":"query","name":"skip","required":true,"schema":{"format":"int32","type":"integer"}}},"responses":{"GeneralError":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GeneralError"}}},"description":"General Error"},"IllegalInput":{"description":"Illegal input for operation."},"NotFound":{"description":"Entity not found."}},"schemas":{"Category":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"}},"type":"object"},"GeneralError":{"properties":{"code":{"format":"int32","type":"integer"},"message":{"type":"string"}},"type":"object"},"Tag":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"}},"type":"object"}},"securitySchemes":{"api_key":{"in":"header","name":"api_key","type":"apiKey"},"petstore_auth":{"flows":{"implicit":{"authorizationUrl":"http://example.org/api/oauth/dialog","scopes":{"read:pets":"read your pets","write:pets":"modify pets in your account"}}},"type":"oauth2"}}}
 */
export type Components = {
  schemas?: {
    [key: string]: Schema
  } | null
  responses?: {
    [key: string]: Response | Reference
  } | null
  parameters?: {
    [key: string]: Parameter | Reference
  } | null
  examples?: {
    [key: string]: Example | Reference
  } | null
  requestBodies?: {
    [key: string]: RequestBody | Reference
  } | null
  headers?: {
    [key: string]: Header | Reference
  } | null
  securitySchemes?: {
    [key: string]: SecurityScheme | Reference
  } | null
  links?: {
    [key: string]: Link | Reference
  } | null
  callbacks?: {
    [key: string]:
      | {
          [key: string]: PathItem | Reference
        }
      | Reference
  } | null
  pathItems?: {
    [key: string]: PathItem | Reference
  } | null
} & {
  [key: string]: any
}

/**
 * Contact information for the exposed API.
 *
 * @example {"email":"support@example.com","name":"API Support","url":"http://www.example.com/support"}
 */
export type Contact = {
  name?: string | null
  url?: string | null
  email?: string | null
} & {
  [key: string]: any
}

/**
 * Data type of an object.
 */
export type DataType = "null" | "string" | "number" | "integer" | "boolean" | "array" | "object"

/**
 * When request bodies or response payloads may be one of a number of different
 * schemas, a `discriminator` object can be used to aid in serialization,
 * deserialization, and validation.
 *
 * The discriminator is a specific object in a schema which is used to inform the
 * consumer of the specification of an alternative schema based on the value
 * associated with it.
 *
 * When using the discriminator, _inline_ schemas will not be considered.
 *
 * @example {"mapping":{"dog":"#/components/schemas/Dog","monster":"https://gigantic-server.com/schemas/Monster/schema.json"},"propertyName":"petType"}
 */
export type Discriminator = {
  propertyName: string
  mapping?: {
    [key: string]: string
  } | null
} & {
  [key: string]: any
}

/**
 * A single encoding definition applied to a single schema property.
 *
 * @example {"contentType":"image/png, image/jpeg","headers":{"X-Rate-Limit-Limit":{"description":"The number of allowed requests in the current period","schema":{"type":"integer"}}}}
 */
export type Encoding = {
  contentType?: string | null
  headers?: {
    [key: string]: Header | Reference
  } | null
  style?: string | null
  explode?: boolean | null
  /**
   * @default false
   */
  allowReserved?: boolean
} & {
  [key: string]: any
}

export type EvaluateResult = {
  prompt?: AppModelsPromptfooModelsPrompt | null
  response?: ProviderResponse | null
  vars?: {
    [key: string]: string
  } | null
  score: number | null
  latencyMs: number
  gradingResult?: GradingResult | null
  namedScores: {
    [key: string]: number
  }
  cost?: number | null
  metadata?: Record<string, any> | null
}

export type EvaluateStats = {
  successes: number
  failures: number
  tokenUsage: TokenUsage
}

export type EvaluateSummary = {
  /**
   * @format date-time
   */
  timestamp: string
  results: EvaluateResult[]
  stats: EvaluateStats
}

/**
 * @example {"summary":"A foo example","value":{"foo":"bar"}}
 * @example {"externalValue":"http://example.org/examples/address-example.xml","summary":"This is an example in XML"}
 * @example {"externalValue":"http://foo.bar/examples/address-example.txt","summary":"This is a text example"}
 */
export type Example = {
  summary?: string | null
  description?: string | null
  value?: void | null
  externalValue?: string | null
} & {
  [key: string]: any
}

/**
 * Allows referencing an external resource for extended documentation.
 *
 * @example {"description":"Find more info here","url":"https://example.com"}
 */
export type ExternalDocumentation = {
  description?: string | null
  url: string
} & {
  [key: string]: any
}

export type GradingResult = {
  pass: boolean
  score: number | null
  componentResults?: GradingResult[] | null
  assertion?: Assertion | null
  comment?: string | null
}

export type HTTPValidationError = {
  detail?: ValidationError[]
}

/**
 * The Header Object follows the structure of the
 * [Parameter Object](#parameterObject) with the following changes:
 *
 * 1. `name` MUST NOT be specified, it is given in the corresponding
 *     `headers` map.
 * 2. `in` MUST NOT be specified, it is implicitly in `header`.
 * 3. All traits that are affected by the location MUST be applicable
 *     to a location of `header` (for example, [`style`](#parameterStyle)).
 *
 * @example {"description":"The number of allowed requests in the current period","schema":{"type":"integer"}}
 */
export type Header = {
  description?: string | null
  /**
   * @default false
   */
  required?: boolean
  /**
   * @default false
   */
  deprecated?: boolean
  style?: string | null
  explode?: boolean | null
  schema?: Reference | Schema | null
  example?: void | null
  examples?: {
    [key: string]: Example | Reference
  } | null
  content?: {
    [key: string]: MediaType
  } | null
} & {
  [key: string]: any
}

export type HttpExceptionModel = {
  message: string
  status: number
}

/**
 * The object provides metadata about the API.
 * The metadata MAY be used by the clients if needed,
 * and MAY be presented in editing or documentation generation tools for convenience.
 *
 * @example {"contact":{"email":"support@example.com","name":"API Support","url":"http://www.example.com/support"},"description":"This is a sample server for a pet store.","license":{"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"},"summary":"A pet store manager.","termsOfService":"http://example.com/terms/","title":"Sample Pet Store App","version":"1.0.1"}
 */
export type Info = {
  title: string
  summary?: string | null
  description?: string | null
  termsOfService?: string | null
  contact?: Contact | null
  license?: License | null
  version: string
} & {
  [key: string]: any
}

export type InputVariable = {
  /**
   * @maxLength 40
   * @minLength 1
   * @pattern ^[^\s]+$
   */
  name: string
}

export type JsonSchemaInput = {
  type: "string" | "number" | "integer" | "boolean" | "object" | "array" | "null"
  title?: string | null
  ["enum"]?: string[] | number[] | number[] | null
  maxLength?: number | null
  minLength?: number | null
  pattern?: string | null
  multipleOf?: number | null
  maximum?: number | null
  exclusiveMaximum?: number | null
  minimum?: number | null
  exclusiveMinimum?: number | null
  items?: JsonSchemaInput | null
  contains?: JsonSchemaInput | null
  maxContains?: number | null
  minContains?: number | null
  maxItems?: number | null
  minItems?: number | null
  uniqueItems?: boolean | null
  properties?: {
    [key: string]: JsonSchemaInput
  } | null
  patternProperties?: {
    [key: string]: JsonSchemaInput
  } | null
  additionalProperties?: boolean | JsonSchemaInput | null
  maxProperties?: number | null
  minProperties?: number | null
  required?: string[] | null
}

export type JsonSchemaOutput = {
  type: "string" | "number" | "integer" | "boolean" | "object" | "array" | "null"
  title?: string | null
  ["enum"]?: string[] | number[] | number[] | null
  maxLength?: number | null
  minLength?: number | null
  pattern?: string | null
  multipleOf?: number | null
  maximum?: number | null
  exclusiveMaximum?: number | null
  minimum?: number | null
  exclusiveMinimum?: number | null
  items?: JsonSchemaOutput | null
  contains?: JsonSchemaOutput | null
  maxContains?: number | null
  minContains?: number | null
  maxItems?: number | null
  minItems?: number | null
  uniqueItems?: boolean | null
  properties?: {
    [key: string]: JsonSchemaOutput
  } | null
  patternProperties?: {
    [key: string]: JsonSchemaOutput
  } | null
  additionalProperties?: boolean | JsonSchemaOutput | null
  maxProperties?: number | null
  minProperties?: number | null
  required?: string[] | null
}

/**
 * License information for the exposed API.
 *
 * @example {"identifier":"Apache-2.0","name":"Apache 2.0"}
 * @example {"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"}
 */
export type License = {
  name: string
  identifier?: string | null
  url?: string | null
} & {
  [key: string]: any
}

/**
 * The `Link object` represents a possible design-time link for a response.
 * The presence of a link does not guarantee the caller's ability to successfully
 * invoke it, rather it provides a known relationship and traversal mechanism between
 * responses and other operations.
 *
 * Unlike _dynamic_ links (i.e. links provided **in** the response payload),
 * the OAS linking mechanism does not require link information in the runtime response.
 *
 * For computing links, and providing instructions to execute them,
 * a [runtime expression](#runtimeExpression) is used for accessing values in an
 * operation and using them as parameters while invoking the linked operation.
 *
 * @example {"operationId":"getUserAddressByUUID","parameters":{"userUuid":"$response.body#/uuid"}}
 * @example {"operationRef":"#/paths/~12.0~1repositories~1{username}/get","parameters":{"username":"$response.body#/username"}}
 */
export type Link = {
  operationRef?: string | null
  operationId?: string | null
  parameters?: Record<string, any> | null
  requestBody?: void | null
  description?: string | null
  server?: Server | null
} & {
  [key: string]: any
}

/**
 * Each Media Type Object provides schema and examples for the media type
 * identified by its key.
 *
 * @example {"examples":{"cat":{"summary":"An example of a cat","value":{"breed":"Persian","color":"White","gender":"male","name":"Fluffy","petType":"Cat"}},"dog":{"summary":"An example of a dog with a cat's name","value":{"breed":"Mixed","color":"Black","gender":"Female","name":"Puma","petType":"Dog"}},"frog":{"$ref":"#/components/examples/frog-example"}},"schema":{"$ref":"#/components/schemas/Pet"}}
 */
export type MediaType = {
  schema?: Reference | Schema | null
  example?: void | null
  examples?: {
    [key: string]: Example | Reference
  } | null
  encoding?: {
    [key: string]: Encoding
  } | null
} & {
  [key: string]: any
}

/**
 * Configuration details for a supported OAuth Flow
 *
 * @example {"authorizationUrl":"https://example.com/api/oauth/dialog","scopes":{"read:pets":"read your pets","write:pets":"modify pets in your account"}}
 * @example {"authorizationUrl":"https://example.com/api/oauth/dialog","scopes":{"read:pets":"read your pets","write:pets":"modify pets in your account"},"tokenUrl":"https://example.com/api/oauth/token"}
 * @example {"authorizationUrl":"/api/oauth/dialog","refreshUrl":"/api/oauth/token","scopes":{"read:pets":"read your pets","write:pets":"modify pets in your account"},"tokenUrl":"/api/oauth/token"}
 */
export type OAuthFlow = {
  authorizationUrl?: string | null
  tokenUrl?: string | null
  refreshUrl?: string | null
  scopes?: {
    [key: string]: string
  } | null
} & {
  [key: string]: any
}

/**
 * Allows configuration of the supported OAuth Flows.
 */
export type OAuthFlows = {
  implicit?: OAuthFlow | null
  password?: OAuthFlow | null
  clientCredentials?: OAuthFlow | null
  authorizationCode?: OAuthFlow | null
} & {
  [key: string]: any
}

/**
 * This is the root document object of the OpenAPI document.
 */
export type OpenAPI = {
  /**
   * @default 3.1.1
   */
  openapi?: "3.1.1" | "3.1.0"
  info: Info
  jsonSchemaDialect?: string | null
  /**
   * @default {"url":"/"}
   */
  servers?: Server[]
  paths?: {
    [key: string]: PathItem
  } | null
  webhooks?: {
    [key: string]: PathItem | Reference
  } | null
  components?: Components | null
  security?:
    | {
        [key: string]: string[]
      }[]
    | null
  tags?: Tag[] | null
  externalDocs?: ExternalDocumentation | null
} & {
  [key: string]: any
}

/**
 * Describes a single API operation on a path.
 *
 * @example {"operationId":"updatePetWithForm","parameters":[{"description":"ID of pet that needs to be updated","in":"path","name":"petId","required":true,"schema":{"type":"string"}}],"requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"properties":{"name":{"description":"Updated name of the pet","type":"string"},"status":{"description":"Updated status of the pet","type":"string"}},"required":["status"],"type":"object"}}}},"responses":{"200":{"content":{"application/json":{},"application/xml":{}},"description":"Pet updated."},"405":{"content":{"application/json":{},"application/xml":{}},"description":"Method Not Allowed"}},"security":[{"petstore_auth":["write:pets","read:pets"]}],"summary":"Updates a pet in the store with form data","tags":["pet"]}
 */
export type Operation = {
  tags?: string[] | null
  summary?: string | null
  description?: string | null
  externalDocs?: ExternalDocumentation | null
  operationId?: string | null
  parameters?: (Parameter | Reference)[] | null
  requestBody?: RequestBody | Reference | null
  responses?: {
    [key: string]: Response | Reference
  } | null
  callbacks?: {
    [key: string]:
      | {
          [key: string]: PathItem | Reference
        }
      | Reference
  } | null
  /**
   * @default false
   */
  deprecated?: boolean
  security?:
    | {
        [key: string]: string[]
      }[]
    | null
  servers?: Server[] | null
} & {
  [key: string]: any
}

/**
 * Describes a single operation parameter.
 *
 * A unique parameter is defined by a combination of a [name](#parameterName) and
 * [location](#parameterIn).
 *
 * @example {"description":"token to be passed as a header","in":"header","name":"token","required":true,"schema":{"items":{"format":"int64","type":"integer"},"type":"array"},"style":"simple"}
 * @example {"description":"username to fetch","in":"path","name":"username","required":true,"schema":{"type":"string"}}
 * @example {"description":"ID of the object to fetch","explode":true,"in":"query","name":"id","required":false,"schema":{"items":{"type":"string"},"type":"array"},"style":"form"}
 * @example {"in":"query","name":"freeForm","schema":{"additionalProperties":{"type":"integer"},"type":"object"},"style":"form"}
 * @example {"content":{"application/json":{"schema":{"properties":{"lat":{"type":"number"},"long":{"type":"number"}},"required":["lat","long"],"type":"object"}}},"in":"query","name":"coordinates"}
 */
export type Parameter = {
  description?: string | null
  /**
   * @default false
   */
  required?: boolean
  /**
   * @default false
   */
  deprecated?: boolean
  style?: string | null
  explode?: boolean | null
  schema?: Reference | Schema | null
  example?: void | null
  examples?: {
    [key: string]: Example | Reference
  } | null
  content?: {
    [key: string]: MediaType
  } | null
  name: string
  ["in"]: ParameterLocation
  /**
   * @default false
   */
  allowEmptyValue?: boolean
  /**
   * @default false
   */
  allowReserved?: boolean
} & {
  [key: string]: any
}

/**
 * The location of a given parameter.
 */
export type ParameterLocation = "query" | "header" | "path" | "cookie"

/**
 * Describes the operations available on a single path.
 * A Path Item MAY be empty, due to [ACL constraints](#securityFiltering).
 * The path itself is still exposed to the documentation viewer
 * but they will not know which operations and parameters are available.
 *
 * @example [see original specs]
 */
export type PathItem = {
  $ref?: string | null
  summary?: string | null
  description?: string | null
  get?: Operation | null
  put?: Operation | null
  post?: Operation | null
  ["delete"]?: Operation | null
  options?: Operation | null
  head?: Operation | null
  patch?: Operation | null
  trace?: Operation | null
  servers?: Server[] | null
  parameters?: (Parameter | Reference)[] | null
} & {
  [key: string]: any
}

export type Project = {
  /**
   * @maxLength 40
   * @minLength 1
   * @example My Project
   */
  name: string
  /**
   * @maxLength 20
   * @minLength 1
   */
  path_segment_name: string
  /**
   * @maxLength 1000
   * @minLength 1
   * @example This is a project
   */
  description: string
  api_routes: ProjectAPIRoute[]
  _id?: string
  /**
   * @format email
   */
  username: string
  /**
   * @format date-time
   */
  creation_time: string
}

export type ProjectAPIRoute = {
  ai_function_id: string
  path_segment_name: string
}

export type ProjectPatchInput = {
  name?: string | null
  path_segment_name?: string | null
  description?: string | null
  api_routes?: ProjectAPIRoute[] | null
}

export type ProjectRouteInput = {
  /**
   * @maxLength 40
   * @minLength 1
   * @example My Project
   */
  name: string
  /**
   * @maxLength 20
   * @minLength 1
   */
  path_segment_name: string
  /**
   * @maxLength 1000
   * @minLength 1
   * @example This is a project
   */
  description: string
  api_routes: ProjectAPIRoute[]
}

export type PromptMessage = {
  role: RoleEnum
  content: string
}

export type PromptRouteInput = {
  /**
   * @example [{"content":"Summarize the following text: {{text}} in {{number_of_sentences}} sentences.","role":"user"}]
   */
  messages: PromptMessage[]
  ai_function_id: string
}

export type Provider = "openai:gpt-4o-mini" | "openai:gpt-4"

export type ProviderResponse = {
  cached?: number | null;
  cost?: number | null;
  error?: string | null;
  logProbs?: number[] | null;
  metadata?: Record<string, any> | null;
  output?: string | void | null;
  tokenUsage?: TokenUsage | null;
};

/**
 * A simple object to allow referencing other components in the OpenAPI document.
 *
 * The `$ref` string value contains a URI [RFC3986](https://tools.ietf.org/html/rfc3986),
 * which identifies the location of the value being referenced.
 *
 * See the rules for resolving [Relative References](#relativeReferencesURI).
 *
 * @example {"$ref":"#/components/schemas/Pet"}
 * @example {"$ref":"Pet.json"}
 * @example {"$ref":"definitions.json#/Pet"}
 */
export type Reference = {
  $ref: string;
  summary?: string | null;
  description?: string | null;
} & {
  [key: string]: any;
};

/**
 * Describes a single request body.
 *
 * @example [see original specs]
 * @example {"content":{"text/plain":{"schema":{"items":{"type":"string"},"type":"array"}}},"description":"user to add to the system"}
 */
export type RequestBody = {
  description?: string | null;
  content: {
    [key: string]: MediaType;
  };
  /**
   * @default false
   */
  required?: boolean;
} & {
  [key: string]: any;
};

/**
 * Describes a single response from an API Operation, including design-time,
 * static `links` to operations based on the response.
 *
 * @example {"content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/VeryComplexType"},"type":"array"}}},"description":"A complex object array response"}
 * @example {"content":{"text/plain":{"schema":{"type":"string"}}},"description":"A simple string response"}
 * @example {"content":{"text/plain":{"schema":{"example":"whoa!","type":"string"}}},"description":"A simple string response","headers":{"X-Rate-Limit-Limit":{"description":"The number of allowed requests in the current period","schema":{"type":"integer"}},"X-Rate-Limit-Remaining":{"description":"The number of remaining requests in the current period","schema":{"type":"integer"}},"X-Rate-Limit-Reset":{"description":"The number of seconds left in the current period","schema":{"type":"integer"}}}}
 * @example {"description":"object created"}
 */
export type Response = {
  description: string;
  headers?: {
    [key: string]: Header | Reference;
  } | null;
  content?: {
    [key: string]: MediaType;
  } | null;
  links?: {
    [key: string]: Link | Reference;
  } | null;
} & {
  [key: string]: any;
};

export type RoleEnum = "system" | "user" | "assistant";

/**
 * The Schema Object allows the definition of input and output data types.
 * These types can be objects, but also primitives and arrays.
 * This object is a superset of
 * the [JSON Schema Specification Draft 2020-12](https://tools.ietf.org/html/draft-bhutton-json-schema-00).
 *
 * For more information about the properties,
 * see [JSON Schema Core](https://tools.ietf.org/html/draft-wright-json-schema-00)
 * and [JSON Schema Validation](https://tools.ietf.org/html/draft-wright-json-schema-validation-00).
 *
 * Unless stated otherwise, the property definitions follow those of JSON Schema
 * and do not add any additional semantics.
 * Where JSON Schema indicates that behavior is defined by the application (e.g. for
 * annotations), OAS also defers the definition of semantics to the application
 * consuming the OpenAPI document.
 *
 * @example {"format":"email","type":"string"}
 * @example {"properties":{"name":{"type":"string"},"address":{"$ref":"#/components/schemas/Address"},"age":{"format":"int32","minimum":0,"type":"integer"}},"required":["name"],"type":"object"}
 * @example {"additionalProperties":{"type":"string"},"type":"object"}
 * @example {"additionalProperties":{"$ref":"#/components/schemas/ComplexModel"},"type":"object"}
 * @example {"example":{"id":1,"name":"Puma"},"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"}},"required":["name"],"type":"object"}
 * @example {"properties":{"message":{"type":"string"},"code":{"maximum":600,"minimum":100,"type":"integer"}},"required":["message","code"],"type":"object"}
 * @example {"allOf":[{"$ref":"#/components/schemas/ErrorModel"},{"properties":{"rootCause":{"type":"string"}},"required":["rootCause"],"type":"object"}]}
 * @example {"discriminator":{"propertyName":"petType"},"properties":{"name":{"type":"string"},"petType":{"type":"string"}},"required":["name","petType"],"type":"object"}
 * @example {"allOf":[{"$ref":"#/components/schemas/Pet"},{"properties":{"huntingSkill":{"default":"lazy","description":"The measured skill for hunting","enum":["clueless","lazy","adventurous","aggressive"],"type":"string"}},"required":["huntingSkill"],"type":"object"}],"description":"A representation of a cat. Note that `Cat` will be used as the discriminator value."}
 * @example {"allOf":[{"$ref":"#/components/schemas/Pet"},{"properties":{"packSize":{"default":0,"description":"the size of the pack the dog is from","format":"int32","minimum":0,"type":"integer"}},"required":["packSize"],"type":"object"}],"description":"A representation of a dog. Note that `Dog` will be used as the discriminator value."}
 */
export type Schema = {
  allOf?: (Reference | Schema)[] | null;
  anyOf?: (Reference | Schema)[] | null;
  oneOf?: (Reference | Schema)[] | null;
  not?: Reference | Schema | null;
  ["if"]?: Reference | Schema | null;
  then?: Reference | Schema | null;
  ["else"]?: Reference | Schema | null;
  dependentSchemas?: {
    [key: string]: Reference | Schema;
  } | null;
  prefixItems?: (Reference | Schema)[] | null;
  items?: Reference | Schema | null;
  contains?: Reference | Schema | null;
  properties?: {
    [key: string]: Reference | Schema;
  } | null;
  patternProperties?: {
    [key: string]: Reference | Schema;
  } | null;
  additionalProperties?: Reference | Schema | boolean | null;
  propertyNames?: Reference | Schema | null;
  unevaluatedItems?: Reference | Schema | null;
  unevaluatedProperties?: Reference | Schema | null;
  type?: DataType | DataType[] | null;
  ["enum"]?: any[] | null;
  ["const"]?: void | null;
  multipleOf?: number | null;
  maximum?: number | null;
  exclusiveMaximum?: number | null;
  minimum?: number | null;
  exclusiveMinimum?: number | null;
  maxLength?: number | null;
  minLength?: number | null;
  pattern?: string | null;
  maxItems?: number | null;
  minItems?: number | null;
  uniqueItems?: boolean | null;
  maxContains?: number | null;
  minContains?: number | null;
  maxProperties?: number | null;
  minProperties?: number | null;
  required?: string[] | null;
  dependentRequired?: {
    [key: string]: string[];
  } | null;
  format?: string | null;
  contentEncoding?: string | null;
  contentMediaType?: string | null;
  contentSchema?: Reference | Schema | null;
  title?: string | null;
  description?: string | null;
  ["default"]?: void | null;
  deprecated?: boolean | null;
  readOnly?: boolean | null;
  writeOnly?: boolean | null;
  examples?: any[] | null;
  discriminator?: Discriminator | null;
  xml?: Xml | null;
  externalDocs?: ExternalDocumentation | null;
  example?: void | null;
} & {
  [key: string]: any;
};

/**
 * Defines a security scheme that can be used by the operations.
 *
 * Supported schemes are HTTP authentication,
 * an API key (either as a header, a cookie parameter or as a query parameter),
 * mutual TLS (use of a client certificate),
 * OAuth2's common flows (implicit, password, client credentials and authorization
 * code) as defined in [RFC6749](https://tools.ietf.org/html/rfc6749),
 * and [OpenID Connect Discovery](https://tools.ietf.org/html/draft-ietf-oauth-discovery-06).
 *
 * Please note that as of 2020, the implicit flow is about to be deprecated by
 * [OAuth 2.0 Security Best Current Practice](https://tools.ietf.org/html/draft-ietf-oauth-security-topics).
 * Recommended for most use case is Authorization Code Grant flow with PKCE.
 *
 * @example {"scheme":"basic","type":"http"}
 * @example {"in":"header","name":"api_key","type":"apiKey"}
 * @example {"bearerFormat":"JWT","scheme":"bearer","type":"http"}
 * @example {"flows":{"implicit":{"authorizationUrl":"https://example.com/api/oauth/dialog","scopes":{"read:pets":"read your pets","write:pets":"modify pets in your account"}}},"type":"oauth2"}
 * @example {"openIdConnectUrl":"https://example.com/openIdConnect","type":"openIdConnect"}
 * @example {"openIdConnectUrl":"openIdConnect","type":"openIdConnect"}
 */
export type SecurityScheme = {
  type: string;
  description?: string | null;
  name?: string | null;
  ["in"]?: string | null;
  scheme?: string | null;
  bearerFormat?: string | null;
  flows?: OAuthFlows | null;
  openIdConnectUrl?: string | null;
} & {
  [key: string]: any;
};

/**
 * An object representing a Server.
 *
 * @example {"description":"Development server","url":"https://development.gigantic-server.com/v1"}
 * @example {"description":"The production API server","url":"https://{username}.gigantic-server.com:{port}/{basePath}","variables":{"basePath":{"default":"v2"},"port":{"default":"8443","enum":["8443","443"]},"username":{"default":"demo","description":"this value is assigned by the service provider, in this example `gigantic-server.com`"}}}
 */
export type Server = {
  url: string;
  description?: string | null;
  variables?: {
    [key: string]: ServerVariable;
  } | null;
} & {
  [key: string]: any;
};

/**
 * An object representing a Server Variable for server URL template substitution.
 */
export type ServerVariable = {
  ["enum"]?: string[] | null;
  ["default"]: string;
  description?: string | null;
} & {
  [key: string]: any;
};

export type SuccessResponse = {
  /**
   * @default Success
   */
  message?: string;
};

/**
 * Adds metadata to a single tag that is used by the
 * [Operation Object](#operationObject).
 * It is not mandatory to have a Tag Object per tag defined in the Operation Object
 * instances.
 *
 * @example {"description":"Pets operations","name":"pet"}
 */
export type Tag = {
  name: string;
  description?: string | null;
  externalDocs?: ExternalDocumentation | null;
} & {
  [key: string]: any;
};

export type TestCaseInput = {
  vars: {
    [key: string]: string;
  };
  assert: Assertion[] | null;
};

export type TestCaseOutput = {
  vars: {
    [key: string]: string;
  };
  assert: Assertion[] | null;
};

export type TokenUsage = {
  /**
   * @default 0
   */
  total?: number | null;
  /**
   * @default 0
   */
  prompt?: number | null;
  /**
   * @default 0
   */
  completion?: number | null;
  /**
   * @default 0
   */
  cached?: number | null;
};

export type User = {
  name: string;
  /**
   * @format email
   */
  email: string;
  _id?: string;
};

export type UserRootInput = {
  name: string;
  /**
   * @format email
   */
  email: string;
};

export type UserWithAccessToken = {
  name: string;
  /**
   * @format email
   */
  email: string;
  _id?: string;
  access_token: string;
};

export type ValidationError = {
  loc: (string | number)[];
  msg: string;
  type: string;
};

/**
 * A metadata object that allows for more fine-tuned XML model definitions.
 *
 * When using arrays, XML element names are *not* inferred (for singular/plural forms)
 * and the `name` property SHOULD be used to add that information.
 * See examples for expected behavior.
 *
 * @example {"name":"animal"}
 * @example {"attribute":true}
 * @example {"wrapped":true}
 * @example {"namespace":"http://example.com/schema/sample","prefix":"sample"}
 * @example {"name":"aliens","wrapped":true}
 */
export type Xml = {
  name?: string | null;
  namespace?: string | null;
  prefix?: string | null;
  /**
   * @default false
   */
  attribute?: boolean;
  /**
   * @default false
   */
  wrapped?: boolean;
} & {
  [key: string]: any;
};
