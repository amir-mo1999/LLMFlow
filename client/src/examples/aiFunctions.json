[
  {
    "name": "Translate Text",
    "description": "Translates input text into a specified target language.",
    "input_variables": [
      {
        "name": "text"
      },
      {
        "name": "target_language"
      }
    ],
    "output_schema": {
      "type": "object",
      "properties": { "translatedText": { "type": "string" } }
    },
    "providers": ["openai:gpt-4o-mini", "openai:gpt-4"],
    "assert": [],
    "test_cases": [
      {
        "assert": [
          {
            "type": "icontains",
            "value": "hola",
            "weight": 5
          }
        ],
        "vars": {
          "text": "Hello",
          "target_language": "Spanish"
        }
      },
      {
        "assert": [
          {
            "type": "icontains",
            "value": "bonjour",
            "weight": 5
          }
        ],
        "vars": {
          "text": "Good morning",
          "target_language": "French"
        }
      }
    ]
  },
  {
    "name": "Summarize Texts",
    "description": "Summarizes english texts to a given number_of_sentences.",
    "input_variables": [
      {
        "name": "text"
      },
      {
        "name": "number_of_sentences"
      }
    ],
    "output_schema": {
      "type": "string"
    },
    "providers": ["openai:gpt-4o-mini"],
    "assert": [],
    "test_cases": [
      {
        "assert": [
          {
            "type": "icontains",
            "value": "serendipity",
            "weight": 5
          }
        ],
        "vars": {
          "number_of_sentences": "2",
          "text": "The power of serendipity is fascinating. Sometimes, the most unexpected encounters can lead to life-changing experiences. Imagine strolling through a park and stumbling upon a group of musicians, their melodies drawing you in. You pause for a moment, only to realize that this spontaneous moment of joy is exactly what you needed—a break from the routine, a reminder of life's simple pleasures. Serendipity teaches us that not everything needs to be planned. Sometimes, the best moments are the ones that catch us by surprise."
        }
      },
      {
        "assert": [
          {
            "type": "icontains",
            "value": "minimalism",
            "weight": 5
          }
        ],
        "vars": {
          "number_of_sentences": "2",
          "text": "The art of minimalism is more than just decluttering your space—it's about simplifying life. In a world overflowing with choices and distractions, minimalism encourages you to focus on what truly matters. It's about owning fewer things but cherishing each one more deeply. By stripping away the excess, you create room for clarity, intention, and peace. Whether it’s reducing physical possessions or streamlining your daily habits, minimalism can bring a sense of freedom, allowing you to invest time and energy in experiences and relationships that bring genuine joy."
        }
      }
    ]
  },
  {
    "name": "Named Entity Recognition",
    "description": "This functions aims to recognize named entities in a text. The user specifies the text and the entity types they aim to extract from the text. The function returns the entities in a structured json format. The output represents an array of object. Each object has four keys: entity, entity_type, start_position and end_position. The first is the entity itself, the second specifies the type of the found entity, which is one of the entity types specified under the “entity_types” parameter, and the last two give information on the position of the entity in the text.",
    "providers": ["openai:gpt-4"],
    "input_variables": [
      {
        "name": "text"
      },
      {
        "name": "entity_types"
      }
    ],
    "output_schema": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "entitiy": {
            "type": "string"
          },
          "entitiy_type": {
            "type": "string"
          },
          "start": {
            "type": "number"
          },
          "end": {
            "type": "number"
          }
        }
      }
    },
    "assert": [
      {
        "type": "is-json",
        "value": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "entitiy": {
                "type": "string"
              },
              "entitiy_type": {
                "type": "string"
              },
              "start": {
                "type": "number"
              },
              "end": {
                "type": "number"
              }
            }
          }
        },
        "weight": 10
      },
      {
        "type": "python",
        "value": "# assert that the entity type is in the list of specified entity types\nimport json\n\noutput = json.loads(output)\n\nfor ent in output:\n  if ent[\"entity_type\"] not in context[\"vars\"][\"entity_types\"]:\n    return False\n\nreturn True",
        "weight": 1
      }
    ],
    "test_cases": [
      {
        "vars": {
          "text": "Marie Curie discovered radium in Paris on December 10, 1898. She was awarded the Nobel Prize in Chemistry in 1911.",
          "entity_types": "Person, Date, Chemical Element, Location"
        },
        "assert": []
      },
      {
        "vars": {
          "text": "Apple Inc. announced its latest iPhone model on September 12, 2023, at its headquarters in Cupertino, California.",
          "entity_types": "Organization, Date, Location"
        },
        "assert": []
      },
      {
        "vars": {
          "text": "NASA plans to launch the Artemis II mission to the Moon on November 15, 2024, from the Kennedy Space Center in Florida.",
          "entity_types": "Organization, Date, Location"
        },
        "assert": []
      },
      {
        "vars": {
          "text": "The novel 'Pride and Prejudice' by Jane Austen was published in 1813 and has remained popular worldwide.",
          "entity_types": "Literary Work, Person, Date"
        },
        "assert": []
      },
      {
        "vars": {
          "text": "In 1969, Neil Armstrong became the first person to walk on the moon during the Apollo 11 mission.",
          "entity_types": "Date, Person, Event"
        },
        "assert": []
      },
      {
        "vars": {
          "text": "The artwork 'Starry Night' by Vincent van Gogh is displayed at the Museum of Modern Art in New York.",
          "entity_types": "Artistic Work, Person, Organization, Location"
        },
        "assert": []
      }
    ]
  },
  {
    "name": "Dynamic Story Generator",
    "description": "The Dynamic Story Generator function creates a unique and personalized story based on user inputs. The function takes the following parameters:\n- character_name: The main character’s name in the story, adding a personalized touch and making the narrative more relatable.\n- setting: Describes the story's initial environment or location (e.g., \"a bustling city\" or \"an enchanted forest\"), which establishes the atmosphere and context.\n- goal: Represents the main character's objective or mission within the story, driving the narrative forward.\n- obstacle: The central challenge, conflict, or antagonist the main character must overcome, providing tension and stakes.\n- ally_name: The name of a companion who supports the main character during their journey, contributing to character dynamics and plot development.\n- theme: Specifies the overall theme or genre of the story (e.g., \"romance,\" \"mystery,\" or \"adventure\"), shaping the tone and direction of the narrative.",
    "providers": ["openai:gpt-4o-mini"],
    "input_variables": [
      {
        "name": "character_name"
      },
      {
        "name": "setting"
      },
      {
        "name": "goal"
      },
      {
        "name": "obstacle"
      },
      {
        "name": "ally_name"
      },
      {
        "name": "theme"
      }
    ],
    "output_schema": {
      "type": "string"
    },
    "assert": [],
    "test_cases": [
      {
        "vars": {
          "character_name": "Luna",
          "setting": "a mystical island",
          "goal": "to find the ancient crystal that grants wishes",
          "obstacle": "a fierce sea dragon guarding the crystal",
          "ally_name": "Kai",
          "theme": "fantasy"
        },
        "assert": []
      },
      {
        "vars": {
          "character_name": "Max",
          "setting": "a small, sleepy town",
          "goal": "to uncover the mystery behind the missing treasure",
          "obstacle": "a cunning rival treasure hunter",
          "ally_name": "Sophie",
          "theme": "mystery"
        },
        "assert": []
      },
      {
        "vars": {
          "setting": "an ancient castle",
          "obstacle": "a ghostly guardian",
          "ally_name": "Elena",
          "theme": "adventure",
          "goal": "to rescue the lost princess",
          "character_name": "Lucas"
        },
        "assert": []
      },
      {
        "vars": {
          "setting": "a futuristic city",
          "obstacle": "an evil corporation",
          "ally_name": "Jordan",
          "theme": "sci-fi",
          "goal": "to expose the truth behind the corruption",
          "character_name": "Avery"
        },
        "assert": []
      }
    ]
  },
  {
    "name": "Customized Workout Routine",
    "description": "This AI function creates a customized workout routine based on user preferences, fitness goals, and available equipment, helping users stay fit and motivated.\n\nParameters:\n1.\tfitness_goal: The user's primary fitness objective (e.g., \"weight loss,\" \"muscle gain,\" \"flexibility\").\n2.\texperience_level: The user's current level of fitness or workout experience (e.g., \"beginner,\" \"intermediate,\" \"advanced\").\n3.\tavailable_time: The amount of time the user can dedicate to a workout session (e.g., \"30 minutes\").\n4.\tpreferred_workout_type: The type of workouts the user enjoys or prefers (e.g., \"strength training,\" \"yoga,\" \"HIIT\").\n5.\tavailable_equipment: The workout equipment available to the user (e.g., \"dumbbells,\" \"no equipment\", “calinsthenics”, “machines” or a mixture of several).\n6.\tdays_per_week: The number of days per week the user can commit to working out.\n\nThe function outputs a weekly workout plan in a structured manner. The output is a json array which contains an item for each weekday where a workout is scheduled. Off days are not included in the array. The workout items have the following fields:\n- weekday: lowercased long form of the weekday where a workout should take place (e.g. monday, tuesday, etc.)\n- workout_duration_minutes: the duration of the workout in minutes\n- exercises: an array of exercises for this weekdays workout. An exercise has the following properties:\n     - name: name of the exercise (e.b. shoulder press, bench press, bulgarian deadlift)\n     - repetitions: exercise repetitions for each set\n     - sets: total sets to complete",
    "providers": ["openai:gpt-4"],
    "input_variables": [
      {
        "name": "fitness_goal"
      },
      {
        "name": "experience_level"
      },
      {
        "name": "available_time"
      },
      {
        "name": "preferred_workout_type"
      },
      {
        "name": "available_equipment"
      },
      {
        "name": "days_per_week"
      }
    ],
    "output_schema": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "weekday": {
            "type": "string",
            "pattern": "^(monday|tuesday|wednesday|thursday|friday|saturday|sunday)$"
          },
          "workout_duration_minutes": {
            "type": "number"
          },
          "exercises": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "repetitions": {
                  "type": "number"
                },
                "sets": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "assert": [
      {
        "type": "is-json",
        "value": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "weekday": {
                "type": "string",
                "pattern": "^(monday|tuesday|wednesday|thursday|friday|saturday|sunday)$"
              },
              "workout_duration_minutes": {
                "type": "number"
              },
              "exercises": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "repetitions": {
                      "type": "number"
                    },
                    "sets": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "weight": 10
      }
    ],
    "test_cases": [
      {
        "vars": {
          "fitness_goal": "muscle gain",
          "experience_level": "intermediate",
          "available_time": "45 minutes",
          "preferred_workout_type": "strength training",
          "available_equipment": "dumbbells and machines",
          "days_per_week": "5"
        },
        "assert": []
      },
      {
        "vars": {
          "fitness_goal": "flexibility",
          "experience_level": "beginner",
          "available_time": "30 minutes",
          "preferred_workout_type": "yoga",
          "available_equipment": "no equipment",
          "days_per_week": "3"
        },
        "assert": []
      },
      {
        "vars": {
          "preferred_workout_type": "HIIT",
          "fitness_goal": "weight loss",
          "available_equipment": "dumbbells",
          "days_per_week": "5",
          "available_time": "45 minutes",
          "experience_level": "intermediate"
        },
        "assert": []
      },
      {
        "vars": {
          "preferred_workout_type": "strength training",
          "fitness_goal": "muscle gain",
          "available_equipment": "machines",
          "days_per_week": "4",
          "available_time": "60 minutes",
          "experience_level": "advanced"
        },
        "assert": []
      },
      {
        "vars": {
          "fitness_goal": "weight loss",
          "experience_level": "intermediate",
          "available_time": "45 minutes",
          "preferred_workout_type": "HIIT",
          "available_equipment": "dumbbells",
          "days_per_week": "5"
        },
        "assert": []
      },
      {
        "vars": {
          "fitness_goal": "flexibility",
          "experience_level": "beginner",
          "available_time": "30 minutes",
          "preferred_workout_type": "yoga",
          "available_equipment": "no equipment",
          "days_per_week": "3"
        },
        "assert": []
      }
    ]
  },
  {
    "name": "Customer Support Ticket Categorization",
    "description": "The Customer Support Ticket Categorization function automatically classifies incoming support tickets into predefined categories, improving the efficiency of ticket triage and routing within a customer support system.\n\nParameters:\n•\tticket_subject: The subject line or brief title of the customer support ticket, providing a concise summary of the issue or inquiry.\n•\tticket_description: A detailed description of the customer's issue, offering context and specifics to help with accurate categorization.\n\nThe function categorizes support tickets into one of the following categories:\n•\tAccount Access Issues\n•\tBilling and Payments\n•\tTechnical Support\n•\tProduct Feedback and Suggestions\n•\tShipping and Delivery Issues\n•\tOrder Status Inquiries\n•\tRefunds and Returns\n•\tSubscription and Renewal Questions\n•\tService Outage or Downtime\n•\tFeature Requests\n•\tSecurity and Privacy Concerns\n•\tPromotions and Discounts\n•\tProduct Information Requests\n•\tComplaint Resolution\n•\tGeneral Inquiry",
    "providers": ["openai:gpt-4o-mini", "openai:gpt-4", "openai:gpt-3.5-turbo"],
    "input_variables": [
      {
        "name": "ticket_subject"
      },
      {
        "name": "ticket_description"
      }
    ],
    "output_schema": {
      "type": "string"
    },
    "assert": [
      {
        "type": "regex",
        "value": "^(Account Access Issues|Billing and Payments|Technical Support|Product Feedback and Suggestions|Shipping and Delivery Issues|Order Status Inquiries|Refunds and Returns|Subscription and Renewal Questions|Service Outage or Downtime|Feature Requests|Security and Privacy Concerns|Promotions and Discounts|Product Information Requests|Complaint Resolution|General Inquiry)$",
        "weight": 10
      }
    ],
    "test_cases": [
      {
        "vars": {
          "ticket_subject": "Issue accessing my account",
          "ticket_description": "I am unable to log into my account despite entering the correct credentials. Please assist me in recovering my access."
        },
        "assert": [
          {
            "type": "equals",
            "value": "Account Access Issues",
            "weight": 10
          }
        ]
      },
      {
        "vars": {
          "ticket_subject": "Question about my recent bill",
          "ticket_description": "I received my bill for this month, and I would like clarification on an additional charge that was not present in the previous billing cycle."
        },
        "assert": [
          {
            "type": "equals",
            "value": "Billing and Payments",
            "weight": 1
          }
        ]
      },
      {
        "vars": {
          "ticket_subject": "Delivery delay for my order",
          "ticket_description": "My order was supposed to arrive three days ago, but I have not received any updates on its status. I would like to know when I can expect delivery."
        },
        "assert": [
          {
            "type": "equals",
            "value": "Shipping and Delivery Issues",
            "weight": 1
          }
        ]
      },
      {
        "vars": {
          "ticket_subject": "Question about my subscription renewal",
          "ticket_description": "I received a notification about my subscription renewal, but I'm unsure if I want to continue. Can you provide more details on the benefits and costs associated with my plan?"
        },
        "assert": [
          {
            "type": "equals",
            "value": "Subscription and Renewal Questions",
            "weight": 1
          }
        ]
      },
      {
        "vars": {
          "ticket_subject": "Request for refund on a defective product",
          "ticket_description": "I received a faulty item from my last order and would like to initiate a refund process. Please let me know the steps I need to follow."
        },
        "assert": [
          {
            "type": "equals",
            "value": "Refunds and Returns",
            "weight": 1
          }
        ]
      }
    ]
  }
]
